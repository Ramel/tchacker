<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<stl:block xmlns="http://www.w3.org/1999/xhtml"
  xmlns:stl="http://www.hforge.org/xml-namespaces/stl">
    <!-- Javascript -->
  <script language="javascript">
  var list_products = {<stl:inline stl:repeat="product list_products">
                       "${product/id}":
                          {'module':
                           [<stl:inline stl:repeat="module product/modules">
                             {"id": "${module/id}",
                              "value": "${module/value}"},
                              </stl:inline>],
                           'version':
                           [<stl:inline stl:repeat="version product/versions">
                             {"id": "${version/id}",
                              "value": "${version/value}"},
                              </stl:inline>]}
                       ,</stl:inline>
                      }
  function update_tracker() {
      update_tracker_list('version');
      update_tracker_list('module');
  }
  </script>
<p stl:if="reported_by">
  Reported by <em>${reported_by}</em>
</p>

<br/>

${comments}

<style type="text/css">
.tracker-select {
  width: null;
}
FORM#tracker {
	padding: 25px;
  width: 100%;
}
FORM#tracker DIV {
  float: left;
}
FORM#tracker .label {
  width: 100%;
  float: left;
}
FORM#tracker .two {
  width: 64%;
}
FORM#tracker .bord {
  margin: 0px 0px 0px 3px;
  padding: 0px;
}
FORM#tracker INPUT,
FORM#tracker SELECT {
  margin: 2px 0px;
  padding: 0px;
  width: 95%;
}
FORM#tracker .label {
  margin: 4px 0px 0px 0px;
  padding: 0px;
}
FORM#tracker .two-right {
  width: 31%;
}
FORM#tracker .one .two .three {
  width: 48%;
} 
FORM#tracker FIELDSET.attachment {
  margin: 4px 0px;
  padding: 0px;
} 
FORM#tracker FIELDSET.attachment INPUT,
FORM#tracker FIELDSET.attachment .label {
  margin: 4px ;
  padding: 0px;
}
P.attachment {
width: 100%;	
text-align: right;
}
</style>

<form action=";edit" method="post" enctype="multipart/form-data" id="tracker">
  <fieldset>
    <legend>Edit Issue</legend>
    <div class="bord">
    	<a href="#" class="showall">Show/Hide options</a>
    </div>
    <div>
			<div class="two bord">
				<div id="title" class="light">
					<div class="label">
						<label for="title">Title:</label>
						<span class="field-is-missing" title="This field is required">*</span>
						<span stl:if="title/error" class="field-error">${title/error}</span>
					</div>
					<input type="text" name="title" id="title" value="${title/value}"
						size="48" />
				</div>
			</div>
			<div class="two-right">
				<div id="label-assigned-to" class="light">
					<div class="label">
						<label for="assigned-to">Assign To:</label>
						<span stl:if="assigned_to/error" class="field-error">${assigned_to/error}</span>
					</div>
					<select name="assigned_to" id="assigned-to" class="tracker-select">
						<option value=""></option>
						<option stl:repeat="item assigned_to/value" value="${item/name}"
							selected="${item/selected}">${item/value}</option>
					</select>
				</div>
			</div>
		</div>
		<div class="one">
			<div class="two">
      	<div class="three light bord">
					<div class="label">
          	<label for="product">Product:</label>
          	<span class="field-is-missing" title="This field is required">*</span>
          	<span stl:if="product/error" class="field-error">${product/error}</span>
          </div>
					<select name="product" id="product" class="tracker-select">
            <option value="-1"></option>
            <option stl:repeat="item product/value" value="${item/name}"
              selected="${item/selected}">${item/value}</option>
          </select>
        </div>
        <div class="three light bord">
					<div class="label">
          	<label for="type">Type:</label>
          	<span class="field-is-missing" title="This field is required">*</span>
          	<span stl:if="type/error" class="field-error">${type/error}</span>
          </div>
					<select name="type" id="type" class="tracker-select">
            <option value=""></option>
            <option stl:repeat="item type/value" value="${item/name}"
              selected="${item/selected}">${item/value}</option>
          </select>
        </div>
        <div class="three light bord">
					<div class="label">
          	<label for="module">Module:</label>
          	<span stl:if="module/error" class="field-error">${module/error}</span>
        	</div>
          <select name="module" id="module" class="tracker-select">
            <option value=""></option>
            <option stl:repeat="item module/value" value="${item/name}"
              selected="${item/selected}">${item/value}</option>
          </select>
        </div>
        <div class="three light bord">
					<div class="label">
          	<label for="state">Status:</label>
          	<span class="field-is-missing" title="This field is required">*</span>
          	<span stl:if="state/error" class="field-error">${state/error}</span>
        	</div>
          <select name="state" id="state" class="tracker-select">
            <option value=""></option>
            <option stl:repeat="item state/value" value="${item/name}"
              selected="${item/selected}">${item/value}</option>
          </select>
        </div>
        <div class="three light bord">
					<div class="label">
          	<label for="version">Version:</label>
          	<span stl:if="version/error" class="field-error">${version/error}</span>
        	</div>
          <select name="version" id="version" class="tracker-select">
            <option value=""></option>
            <option stl:repeat="item version/value" value="${item/name}"
              selected="${item/selected}">${item/value}</option>
          </select>
        </div>
        <div class="three light bord">
					<div class="label">
          	<label for="priority">Priority:</label>
          	<span stl:if="priority/error" class="field-error">${priority/error}</span>
        	</div>
          <select name="priority" id="priority" class="tracker-select">
            <option value=""></option>
            <option stl:repeat="item priority/value" value="${item/name}"
              selected="${item/selected}">${item/value}</option>
          </select>
        </div>
      </div>
			<div class="two-right light bord">
				<label class="label" for="cc-list">CC:</label>
				<select name="cc_list" id="cc-list" class="tracker-select"
					multiple="multiple" size="6">
					<option stl:repeat="item cc" value="${item/name}"
						selected="selected">${item/value}</option>
					<option disabled="disabled">---</option>
					<option stl:repeat="item nocc" value="${item/name}"
						>${item/value}</option>
				</select>
			</div>
 		</div>
		<div class="one bord">
			<div class="label">
				<a name="new_comment"></a>
				<label for="comment">New Comment:</label>
				<span stl:if="comment/error" class="field-error">${comment/error}</span>
			</div>
			<textarea name="comment" id="comment" cols="80" rows="10"></textarea>
		</div>
		<div class="one bord">
			<fieldset class="attachment">
	    	<legend>Attachments</legend>
				<div class="bord">
					<label class="label" for="attachment">New attachment:</label>
					<input type="file" name="attachment" id="attachment" onchange="attachmentSelected()" size="36" />
				</div>
				<div class="one bord">
					<p id="attName"></p>
					<p id="attSize"></p>
					<p id="attType"></p>
				</div>
				<div id="attachment-progressIndicator"></div>
				<div id="progressIndicator">
					<div class="floatLeft" id="progressBar">
					</div>
					<div class="floatRight" id="progressNumber">&nbsp;</div>
					<!--<div class="clear"></div>-->
					<div>
						<div style="width: 80px;" class="floatLeft" id="transferSpeedInfo">&nbsp;</div>
						<div style="margin-left: 10px;" class="floatLeft" id="timeRemainingInfo">&nbsp;</div>
						<div style="text-align: right;" class="floatRight" id="transferBytesInfo">&nbsp;</div>
						<div class="clear"></div>
					</div>    
					<div id="uploadResponse"></div>
				</div>	
	  	</fieldset>
    </div>
		<!--<input type="button" value="Upload" class="button-ok"></input>-->
		<p>
      <button type="submit" class="button-ok">Edit</button>
    </p>
  </fieldset>
</form>
<script type="text/javascript">
	var bytesUploaded = 0;
	var bytesTotal = 0;
	var previousBytesLoaded = 0;
	var intervalTimer = 0;	

	(function($) {  
		$.fn.getFormData = function() {  
			var data = [];  
			this.find(':input').not(':submit').each(function() {  
				var $inputName = $(this).attr('name');  
				var $inputVal = $(this).val();  
				var formValue = $inputName + '=' + $inputVal;  
				data.push(formValue);  
			});  
			return data.join('<![CDATA[&]]>');  
	 };  
	})(jQuery);  

	function attachmentSelected() {
		var att = document.getElementById('attachment').files[0];
		if (att) {
			var attSize = 0;
			if (att.size > 1024 * 1024) {
				attSize = (Math.round(att.size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
			}
			else {
				attSize = (Math.round(att.size * 100 / 1024) / 100).toString() + 'KB';
			}
			document.getElementById('attName').innerHTML = 'Name: ' + att.name;
			document.getElementById('attSize').innerHTML = 'Size: ' + attSize;
			document.getElementById('attType').innerHTML = 'Type: ' + att.type;
		}
	}
	
	$("#attachment").click(function() {
		$(".button-ok").attr('onclick', "uploadAttachment()");
	});
	/*
	function getFormData(form) {
		var data1 = "";
		var form = document.getElementById(form);
		var elements = form.elements;
		for(var i=0; form.length > i; i++) {
			data1 += elements[i].name + "=" +escape(elements[i].value);
			if(form.length > (i+1))	{
				data1+="<![CDATA[&]]>";
			}
		}
		return data1;
	}
 	*/
	function uploadAttachment() {
		previousBytesLoaded = 0;
		var xhr = new XMLHttpRequest();
		var formElement = document.getElementById('tracker');
		formData = new FormData(formElement);
		/* event listners */
		xhr.upload.addEventListener("progress", uploadProgress, false);
		xhr.addEventListener("load", uploadComplete, false);
		xhr.addEventListener("error", uploadFailed, false);
		xhr.addEventListener("abort", uploadCanceled, false);
		/* Be sure to change the url below to the url of your upload server side script */
		xhr.open("POST", ";edit");
		xhr.send(formData);
		if (xhr.status == 200) {
			output.innerHTML += "Uploaded!<![CDATA[<br />]]>";
		} else {
			output.innerHTML += "Error " + xhr.status + " occurred uploading your file.<![CDATA[<br />]]>";
		}
		intervalTimer = setInterval(updateTransferSpeed, 500);
	}

	function updateTransferSpeed() {
		var currentBytes = bytesUploaded;
		var bytesDiff = currentBytes - previousBytesLoaded;
		if (bytesDiff == 0) return;
		previousBytesLoaded = currentBytes;
		bytesDiff = bytesDiff * 2;
		var bytesRemaining = bytesTotal - previousBytesLoaded;
		var secondsRemaining = bytesRemaining / bytesDiff;

		var speed = "";
		if (bytesDiff > 1024 * 1024)
			speed = (Math.round(bytesDiff * 100/(1024*1024))/100).toString() + 'MBps';
		else if (bytesDiff > 1024)
			speed =  (Math.round(bytesDiff * 100/1024)/100).toString() + 'KBps';
		else
			speed = bytesDiff.toString() + 'Bps';
		document.getElementById('transferSpeedInfo').innerHTML = speed;
		document.getElementById('timeRemainingInfo').innerHTML = '| ' + secondsToString(secondsRemaining);        
	}

	function secondsToString(seconds) {        
		var h = Math.floor(seconds / 3600);
		var m = Math.floor(seconds % 3600 / 60);
		var s = Math.floor(seconds % 3600 % 60);
		return ((h > 0 ? h + ":" : "") + (m > 0 ? (h > 0 <![CDATA[&&]]> m <![CDATA[<]]> 10 ? "0" : "") + m + ":" : "0:") + (s <![CDATA[<]]> 10 ? "0" : "") + s);
		//return ((h > 0 ? h + ":" : "") + (m > 0 ? (h > 0 <![CDATA[&&]]> 10 > m ? "0" : "") + m + ":" : "0:") + (10 > s ? "0" : "") + s);
	}

	function uploadProgress(evt) {
		if (evt.lengthComputable) {
			bytesUploaded = evt.loaded;
			bytesTotal = evt.total;
			var percentComplete = Math.round(evt.loaded * 100 / evt.total);
			var bytesTransfered = '';
			if (bytesUploaded > 1024*1024)
				bytesTransfered = (Math.round(bytesUploaded * 100/(1024*1024))/100).toString() + 'MB';
			else if (bytesUploaded > 1024)
				bytesTransfered = (Math.round(bytesUploaded * 100/1024)/100).toString() + 'KB';
			else
				bytesTransfered = (Math.round(bytesUploaded * 100)/100).toString() + 'Bytes';

			document.getElementById('progressNumber').innerHTML = percentComplete.toString() + '%';
			document.getElementById('progressBar').style.width = (percentComplete * 3.55).toString() + 'px';
			document.getElementById('transferBytesInfo').innerHTML = bytesTransfered;
			if (percentComplete == 100) {
				document.getElementById('progressInfo').style.display = 'none';
				var uploadResponse = document.getElementById('uploadResponse');
				uploadResponse.innerHTML = '<![CDATA[<span style="font-size: 18pt; font-weight: bold;">Please wait...</span>]]>';
				uploadResponse.style.display = 'block';
			}
		}
		else {
			document.getElementById('progressBar').innerHTML = 'unable to compute';
		}  
	}

	function uploadComplete(evt) {
		clearInterval(intervalTimer);
		var uploadResponse = document.getElementById('uploadResponse');
		uploadResponse.innerHTML = evt.target.responseText;
		uploadResponse.style.display = 'block';
	}  

	function uploadFailed(evt) {
		clearInterval(intervalTimer);
		alert("An error occurred while uploading the file.");  
	}  

	function uploadCanceled(evt) {
		clearInterval(intervalTimer);
		alert("The upload has been canceled by the user or the browser dropped the connection.");  
	}  
</script>
</stl:block>
