<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<stl:block xmlns="http://www.w3.org/1999/xhtml"
  xmlns:stl="http://www.hforge.org/xml-namespaces/stl">
<!-- Javascript -->
<script language="javascript">
    var list_products = {
    <stl:inline stl:repeat="product list_products">"${product/id}":
        {'module':
        [<stl:inline stl:repeat="module product/modules">
            {"id": "${module/id}",
            "value": "${module/value}"},
        </stl:inline>],
        'version':
        [<stl:inline stl:repeat="version product/versions">
            {"id": "${version/id}",
            "value": "${version/value}"},
        </stl:inline>]}
    ,</stl:inline>
    }
    function update_tracker() {
        update_tracker_list('version');
        update_tracker_list('module');
    }
</script>

<p stl:if="reported_by">
  Reported by <em>${reported_by}</em>
</p>

<br/>

${comments}

<style type="text/css">
.tracker-select {
  width: null;
}
FORM#tracker {
        padding: 25px 0px;
  width: 100%;
}
FORM#tracker .bord,
FORM#tracker .content,
{
  float: left;
}
#tracker .light {
        display:none;
}
FORM#tracker .one DIV {
  float: left;
}
FORM#tracker .label {
  width: 100%;
  float: left;
}
FORM#tracker .two {
  width: 64%;
}
FORM#tracker .bord {
  margin: 0px 0px 0px 3px;
  padding: 0px;
}
FORM#tracker INPUT,
FORM#tracker SELECT {
  margin: 2px 0px;
  padding: 0px;
  width: 95%;
}
FORM#tracker .label {
  margin: 4px 0px 0px 0px;
  padding: 0px;
}
FORM#tracker .two-right {
  width: 31%;
}
FORM#tracker .one .two .three {
  width: 48%;
}
FORM#tracker FIELDSET.attachment {
  margin: 4px 0px;
  padding: 0px;
}
FORM#tracker FIELDSET.attachment INPUT,
FORM#tracker FIELDSET.attachment .label {
  margin: 4px ;
  padding: 0px;
}
FORM#tracker #upload {
        clear: both;
}
P.attachment {
width: 100%;
text-align: right;
}
</style>

<form action=";edit" method="post" enctype="multipart/form-data" id="tracker"
        onsubmit="beginUpload()">
  <fieldset>
    <legend>Edit Issue</legend>
    <div class="bord">
        <a href="#" class="showall">Show/Hide options</a>
    </div>
    <div class="one">
        <div class="two bord">
            <div id="title" class="light">
                <div class="label">
                    <label for="title">Title:</label>
                    <span class="field-is-missing" title="This field is required">*</span>
                    <span stl:if="title/error" class="field-error">${title/error}</span>
                </div>
                <input type="text" name="title" id="title" value="${title/value}"
                    size="48" />
            </div>
        </div>
        <div class="two-right">
            <div id="label-assigned-to" class="light">
                <div class="label">
                    <label for="assigned-to">Assign To:</label>
                    <span stl:if="assigned_to/error" class="field-error">${assigned_to/error}</span>
                </div>
                <select name="assigned_to" id="assigned-to" class="tracker-select">
                    <option value=""></option>
                    <option stl:repeat="item assigned_to/value" value="${item/name}"
                        selected="${item/selected}">${item/value}</option>
                </select>
            </div>
        </div>
    </div>
    <div class="one">
        <div class="two">
            <div class="three light bord">
                <div class="label">
                    <label for="product">Product:</label>
                    <span class="field-is-missing" title="This field is required">*</span>
                    <span stl:if="product/error" class="field-error">${product/error}</span>
                </div>
                <select name="product" id="product" class="tracker-select">
                    <option value="-1"></option>
                    <option stl:repeat="item product/value" value="${item/name}"
                        selected="${item/selected}">${item/value}</option>
                </select>
            </div>
            <div class="three light bord">
                <div class="label">
                    <label for="type">Type:</label>
                    <span class="field-is-missing" title="This field is required">*</span>
                    <span stl:if="type/error" class="field-error">${type/error}</span>
                </div>
                <select name="type" id="type" class="tracker-select">
                    <option value=""></option>
                    <option stl:repeat="item type/value" value="${item/name}"
                        selected="${item/selected}">${item/value}</option>
                </select>
            </div>
            <div class="three light bord">
                <div class="label">
                    <label for="module">Module:</label>
                    <span stl:if="module/error" class="field-error">${module/error}</span>
                </div>
                <select name="module" id="module" class="tracker-select">
                    <option value=""></option>
                    <option stl:repeat="item module/value" value="${item/name}"
                        selected="${item/selected}">${item/value}</option>
                </select>
            </div>
            <div class="three light bord">
                <div class="label">
                    <label for="state">Status:</label>
                    <span class="field-is-missing" title="This field is required">*</span>
                    <span stl:if="state/error" class="field-error">${state/error}</span>
                </div>
                <select name="state" id="state" class="tracker-select">
                    <option value=""></option>
                    <option stl:repeat="item state/value" value="${item/name}"
                        selected="${item/selected}">${item/value}</option>
                </select>
            </div>
            <div class="three light bord">
                <div class="label">
                    <label for="version">Version:</label>
                    <span stl:if="version/error" class="field-error">${version/error}</span>
                </div>
                <select name="version" id="version" class="tracker-select">
                    <option value=""></option>
                    <option stl:repeat="item version/value" value="${item/name}"
                        selected="${item/selected}">${item/value}</option>
                </select>
            </div>
            <div class="three light bord">
                <div class="label">
                    <label for="priority">Priority:</label>
                    <span stl:if="priority/error" class="field-error">${priority/error}</span>
                </div>
                <select name="priority" id="priority" class="tracker-select">
                    <option value=""></option>
                    <option stl:repeat="item priority/value" value="${item/name}"
                    selected="${item/selected}">${item/value}</option>
                </select>
            </div>
        </div>
        <div class="two-right light bord">
            <label class="label" for="cc-list">CC:</label>
                <select name="cc_list" id="cc-list" class="tracker-select"
                    multiple="multiple" size="6">
                    <option stl:repeat="item cc" value="${item/name}"
                        selected="selected">${item/value}</option>
                    <option disabled="disabled">---</option>
                    <option stl:repeat="item nocc" value="${item/name}"
                        >${item/value}</option>
                </select>
            </div>
        </div>
        <div class="one bord">
            <div class="label">
                <a name="new_comment"></a>
                <label for="comment">New Comment:</label>
                <span stl:if="comment/error" class="field-error">${comment/error}</span>
            </div>
            <textarea name="comment" id="comment" cols="80" rows="10"></textarea>
        </div>
        <div class="one bord">
            <fieldset class="attachment">
                <legend>Attachments</legend>
                <div class="bord">
                    <label class="label" for="attachment">New attachment:</label>
                    <input type="file" name="attachment" id="attachment" size="36" />
                </div>
                <div id="upload" class="one bord">
                    <div id="infos">
                        <p id="attName" />
                        <p id="attSize" />
                        <p id="attType" />
                    </div>
                    <div id="progress">
                        <div class="box">
                            <span><div id="progressbar" /></span><span id="percent" />
                        </div>
                        <div class="box">
                            <div id="speedtime"><div id="speed" /><div id="time" /></div>
                            <div id="current" />
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>
        <p>
            <button type="submit" class="button-ok">Edit</button>
        </p>
    </fieldset>
</form>

<script type="text/javascript">
    $("#attachment").focus(function () {
        attachmentSelected($(this));
    });

    var upload_id = "{upload_id}";
    var started = 0;
    var attSize = 0;
    var uploaded = 0;
    var previouslyUploaded = 0;
    var interval = 500;

    function beginUpload()
    {
        $("#progressbar").progressbar();

        var intervalId = setInterval(function()
        {
            $.getJSON("/;upload_stats?upload_id=" + upload_id, function(data)
            {
                if (data == null || (started == 1 <![CDATA[&&]]> data.percent == '0.0'))
                {
                    clearInterval(intervalId);
                    $("#progressbar").progressbar("destroy");
                    $("#percent, #speed, #current, #time").empty();
                    uploaded = 0;
                    previouslyUploaded = 0;
                    return
                }
                started = 1;
                var percent = Math.floor(data.percent);
                updateCurrentSize(data.percent);
                $("#progressbar").progressbar("option", "value", percent);
                $("#percent").html(percent + "%");
            });
        },
        interval);
    }

    function updateCurrentSize(percent)
    {
        uploaded = parseFloat(percent) * parseFloat(attSize) / 100;
        var currentlyUploaded = uploaded;
        var sizeDiff = currentlyUploaded - previouslyUploaded;
        if (sizeDiff == 0) return;
        previouslyUploaded = currentlyUploaded;
        sizeDiff = sizeDiff * 1000 / interval;
        var bytesRemaining = attSize - previouslyUploaded;
        var secondsRemaining = bytesRemaining / sizeDiff;

        $("#speed").html(sizeToText(sizeDiff, '/s'));
        $("#current").html(sizeToText(uploaded, ''));
        $("#time").html(secondsToText(secondsRemaining));

    }

    function sizeToText(size, text)
    {
        if (size > 1024 * 1024) {
            return (Math.round(size * 100/(1024*1024))/100).toString() + ' Mo' + text;
        } else if (size > 1024) {
            return (Math.round(size * 100/1024)/100).toString() + ' Ko' + text;
        } else {
            return size.toString() + ' octets' + text;
        }
    }

    function secondsToText(seconds)
    {
        var h = Math.floor(seconds / 3600);
        var m = Math.floor(seconds % 3600 / 60);
        var s = Math.floor(seconds % 3600 % 60);
        return ((h > 0 ? h + ":" : "") +
            (m > 0 ? (h > 0 <![CDATA[&&]]> m <![CDATA[<]]> 10 ? "0" : "") + m + ":" : "0:") +
            (s <![CDATA[<]]> 10 ? "0" : "") + s);
    }

    function filenameHasExtension(filename)
    {
        return (/[.]/.exec(filename)) ? /[^.]+$/.exec(filename) : undefined;
    }

    function attachmentSelected(file)
    {
        var attachment = file.get(0).files[0];
        if (attachment)
        {
            //var attSize = 0;
            attName = attachment.name;
            attSize = attachment.size;
            attType = attachment.type;
            if (attSize > 1024 * 1024) {
                attSizeTxt = (Math.round(attSize * 100 / (1024 * 1024)) / 100).toString() + ' Mo';
            }
            else {
                attSizeTxt = (Math.round(attSize * 100 / 1024) / 100).toString() + ' Ko';
            }
            // If the user choose a file without an extension.
            if (filenameHasExtension(attName) == undefined) {
                $("#attName").html(
                    'Name: <![CDATA[<span class="field-is-missing">The given filename have no extension! Please add one before going further!</span>]]>');
            } else {
                $("#attName").html('Name: ' + attName);
            }
            $("#attSize").html('Size: ' + attSizeTxt);
            if(attType == '') {
                $("#attType").html('Type: Unknown');
            } else {
                $("#attType").html('Type: ' + attType);
            }
        }
    }
</script>
</stl:block>
